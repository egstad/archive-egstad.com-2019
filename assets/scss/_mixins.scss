/* ==========================================================================
   MIXINS
   Library of extendable code snippets
   ========================================================================== */

/* Typography
     ========================================================================== */

// All caps
@mixin text-uppercase($letter-spacing: inherit) {
  text-transform: uppercase;

  @if ($letter-spacing) {
    letter-spacing: $letter-spacing;
  }
}

// leading
@mixin leading($number: 1, $lineHeight: 11) {
  line-height: $lineHeight * $number + px;
}

// Hyphenate text
@mixin text-hyphenate() {
  word-break: break-word;
  hyphens: auto;
}

// Truncate text
@mixin text-truncate($width: 100%) {
  width: $width;
  max-width: 100%;
  display: block;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

@mixin visually-hidden() {
  clip: rect(1px,1px,1px,1px);
  -webkit-clip-path: inset(50%);
  clip-path: inset(50%);
  height: 1px;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute !important;
  white-space: nowrap;
  width: 1px;
}

// fluid type with min / max
@mixin text-size($min-font-size, $max-font-size) {
  font-size: $min-font-size;

  @media screen and (min-width: $text-fluidity-start) {
    font-size: calc(
      #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
        ((100vw - #{$text-fluidity-start}) / #{strip-unit($text-fluidity-end - $text-fluidity-start)})
    );
  }

  @media screen and (min-width: $text-fluidity-end) {
    font-size: $max-font-size;
  }
}


// interpolates type size between min and max
@mixin padding($location, $min, $max) {
  @if $location == 'all' {
    padding: $min;
  } @else {
    @each $place in $location {
      padding-#{$place}: $min;
    }
  }
  @media screen and (min-width: $text-fluidity-start) {
    @if $location == 'all' {
      padding: calc(#{$min} + #{strip-unit($max - $min)} * ((100vw - #{$text-fluidity-start}) / #{strip-unit($text-fluidity-end - $text-fluidity-start)}));
    } @else {
      @each $place in $location {
        padding-#{$place}: calc(#{$min} + #{strip-unit($max - $min)} * ((100vw - #{$text-fluidity-start}) / #{strip-unit($text-fluidity-end - $text-fluidity-start)}));
      }
    }    
  }
  @media screen and (min-width: $text-fluidity-end) {
    @if $location == 'all' {
      padding: $max;
    } @else {
      @each $place in $location {
        padding-#{$place}: $max;
      }
    }
  }
}

/* Box Model
     ========================================================================== */

@mixin reset-appearance {
  -webkit-appearance: none;
  line-height: inherit;
  background: 0;
  border: 0;
  padding: 0;
  margin: 0;
  width: auto;
  overflow: visible;
  color: inherit;
  font: inherit;
  line-height: normal;
  -webkit-font-smoothing: inherit;
  -moz-osx-font-smoothing: inherit;

  &::-moz-focus-inner {
    border: 0;
    padding: 0;
  }
}

/* Helpers
     ========================================================================== */

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}
